[versions]
# Spring Framework
spring-boot = "3.4.11"
spring-cloud = "2024.0.1"

# Database & ORM
querydsl = "6.11"
mysql-connector = "8.3.0"
h2 = "2.2.224"
p6spy = "3.9.1"
hypersistence-utils = "3.7.3"

# Security & Authentication
jsonwebtoken = "0.11.2"
spring-security = "6.3.10"

# Network
netty = "4.1.108.Final"

# Development Tools
lombok = "1.18.30"
google-guava = "32.1.2-jre"

# Utilities
commons-lang3 = "3.12.0"
jetbrains-annotations = "26.0.2"

# Caching
caffeine = "3.1.8"

# AWS
aws-java-sdk-s3 = "1.12.725"

# Firebase
firebase-admin = "9.4.3"

# Testing
testng = "7.7.0"
testcontainers = "1.19.8"
testcontainers-junit = "1.19.0"
testcontainers-mysql = "1.19.0"
mockito-inline = "5.2.0"
archunit = "1.4.0"

# Documentation
spring-restdocs = "3.0.1"
restdocs-api-spec = "0.19.4"

# Scheduling
quartz = "2.3.2"

# Monitoring & Observability
opentelemetry = "1.34.1"
opentelemetry-instrumentation = "2.1.0-alpha"  # logback appender용
loki-logback-appender = "1.5.2"

# Code Quality
spotless = "7.0.2"

# Kotlin
kotlin = "1.9.23"

[libraries]
# Spring Boot Core
spring-boot-starter = { module = "org.springframework.boot:spring-boot-starter", version.ref = "spring-boot" }
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "spring-boot" }
spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa", version.ref = "spring-boot" }
spring-boot-starter-data-redis = { module = "org.springframework.boot:spring-boot-starter-data-redis", version.ref = "spring-boot" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation", version.ref = "spring-boot" }
spring-boot-starter-security = { module = "org.springframework.boot:spring-boot-starter-security", version.ref = "spring-boot" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "spring-boot" }
spring-boot-starter-aop = { module = "org.springframework.boot:spring-boot-starter-aop", version.ref = "spring-boot" }
spring-boot-starter-cache = { module = "org.springframework.boot:spring-boot-starter-cache", version.ref = "spring-boot" }
spring-boot-starter-batch = { module = "org.springframework.boot:spring-boot-starter-batch", version.ref = "spring-boot" }
spring-boot-starter-quartz = { module = "org.springframework.boot:spring-boot-starter-quartz", version.ref = "spring-boot" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "spring-boot" }
spring-boot-configuration-processor = { module = "org.springframework.boot:spring-boot-configuration-processor", version.ref = "spring-boot" }

# Spring Cloud
spring-cloud-starter-openfeign = { module = "org.springframework.cloud:spring-cloud-starter-openfeign" }

# Spring Security
spring-security-test = { module = "org.springframework.security:spring-security-test", version.ref = "spring-security" }

# Spring Batch
spring-batch-test = { module = "org.springframework.batch:spring-batch-test" }

# Database
mysql-connector-j = { module = "com.mysql:mysql-connector-j", version.ref = "mysql-connector" }
h2 = { module = "com.h2database:h2", version.ref = "h2" }
p6spy = { module = "p6spy:p6spy", version.ref = "p6spy" }

# QueryDSL
querydsl-jpa = { module = "io.github.openfeign.querydsl:querydsl-jpa", version.ref = "querydsl" }
querydsl-apt = { module = "io.github.openfeign.querydsl:querydsl-apt", version.ref = "querydsl" }

# JPA Extensions
hypersistence-utils = { module = "io.hypersistence:hypersistence-utils-hibernate-60", version.ref = "hypersistence-utils" }

# JWT
jsonwebtoken-api = { module = "io.jsonwebtoken:jjwt-api", version.ref = "jsonwebtoken" }
jsonwebtoken-impl = { module = "io.jsonwebtoken:jjwt-impl", version.ref = "jsonwebtoken" }
jsonwebtoken-jackson = { module = "io.jsonwebtoken:jjwt-jackson", version.ref = "jsonwebtoken" }

# Development Tools
lombok = { module = "org.projectlombok:lombok", version.ref = "lombok" }
google-guava = { module = "com.google.guava:guava", version.ref = "google-guava" }

# Utilities
commons-lang3 = { module = "org.apache.commons:commons-lang3", version.ref = "commons-lang3" }

# Caching
caffeine = { module = "com.github.ben-manes.caffeine:caffeine", version.ref = "caffeine" }

# AWS
aws-s3 = { module = "com.amazonaws:aws-java-sdk-s3", version.ref = "aws-java-sdk-s3" }

# Firebase
firebase-admin = { module = "com.google.firebase:firebase-admin", version.ref = "firebase-admin" }

# Monitoring & Observability
opentelemetry-bom = { module = "io.opentelemetry:opentelemetry-bom", version.ref = "opentelemetry" }
opentelemetry-api = { module = "io.opentelemetry:opentelemetry-api" }
opentelemetry-sdk = { module = "io.opentelemetry:opentelemetry-sdk" }
opentelemetry-exporter-otlp = { module = "io.opentelemetry:opentelemetry-exporter-otlp" }
opentelemetry-logback-appender = { module = "io.opentelemetry.instrumentation:opentelemetry-logback-appender-1.0", version.ref = "opentelemetry-instrumentation" }
micrometer-core = { module = "io.micrometer:micrometer-core" }
micrometer-tracing = { module = "io.micrometer:micrometer-tracing" }
micrometer-tracing-bridge-otel = { module = "io.micrometer:micrometer-tracing-bridge-otel" }
micrometer-registry-otlp = { module = "io.micrometer:micrometer-registry-otlp" }
loki-logback-appender = { module = "com.github.loki4j:loki-logback-appender", version.ref = "loki-logback-appender" }

# Network
netty-bom = { module = "io.netty:netty-bom", version.ref = "netty" }

# Testing
testng = { module = "org.testng:testng", version.ref = "testng" }
testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-junit = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers-junit" }
testcontainers-mysql = { module = "org.testcontainers:mysql", version.ref = "testcontainers-mysql" }
mockito-inline = { module = "org.mockito:mockito-inline", version.ref = "mockito-inline" }
archunit = { module = "com.tngtech.archunit:archunit-junit5", version.ref = "archunit" }

# Documentation
spring-restdocs-asciidoctor = { module = "org.springframework.restdocs:spring-restdocs-asciidoctor", version.ref = "spring-restdocs" }
spring-restdocs-mockmvc = { module = "org.springframework.restdocs:spring-restdocs-mockmvc", version.ref = "spring-restdocs" }
restdocs-api-spec-mockmvc = { module = "com.epages:restdocs-api-spec-mockmvc", version.ref = "restdocs-api-spec" }

# Jackson - Spring Boot에서 관리하는 버전 사용
jackson-annotations = { module = "com.fasterxml.jackson.core:jackson-annotations" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind" }

# Spring Web
spring-web = { module = "org.springframework:spring-web" }

# Jakarta Annotations
jakarta-annotation-api = { module = "jakarta.annotation:jakarta.annotation-api" }
jakarta-persistence-api = { module = "jakarta.persistence:jakarta.persistence-api" }
jetbrains-annotations = { module = "org.jetbrains:annotations", version.ref = "jetbrains-annotations" }

[bundles]
# Spring Boot 기본 번들
spring-boot-default = [
	"spring-boot-starter",
	"spring-boot-starter-test",
	"spring-boot-configuration-processor"
]

# Spring Boot Web 애플리케이션
spring-boot-web = [
	"spring-boot-starter-web",
	"spring-boot-starter-validation"
]

# Spring Boot JPA & Database
spring-boot-jpa = [
	"spring-boot-starter-data-jpa",
	"hypersistence-utils"
]

# Spring Boot Security
spring-boot-security = [
	"spring-boot-starter-security",
	"spring-security-test"
]

# JWT 전체 패키지
jwt-complete = [
	"jsonwebtoken-api",
	"jsonwebtoken-impl",
	"jsonwebtoken-jackson"
]

# QueryDSL 전체
querydsl-complete = [
	"querydsl-jpa"
]

# Testing 패키지
testing-complete = [
	"spring-boot-starter-test",
	"testng",
	"mockito-inline"
]

# TestContainers 패키지
testcontainers-complete = [
	"testcontainers",
	"testcontainers-junit",
	"testcontainers-mysql"
]

# Spring REST Docs
restdocs-complete = [
	"spring-restdocs-mockmvc",
	"restdocs-api-spec-mockmvc"
]

# 공통 유틸리티
utilities = [
	"commons-lang3",
	"jetbrains-annotations"
]

# Spring Batch 번들
spring-batch-complete = [
	"spring-boot-starter-batch",
	"spring-batch-test",
	"spring-boot-starter-quartz"
]

[plugins]
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependency-management = { id = "io.spring.dependency-management", version = "1.1.4" }
asciidoctor = { id = "org.asciidoctor.jvm.convert", version = "4.0.2" }
spotless = { id = "com.diffplug.spotless", version.ref = "spotless" }
restdocs-api-spec = { id = "com.epages.restdocs-api-spec", version.ref = "restdocs-api-spec" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
