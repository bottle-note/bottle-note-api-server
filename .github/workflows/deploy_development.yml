# act workflow_dispatch -W .github/workflows/deploy_development.yml --secret-file .secrets --container-architecture linux/arm64
name: Deploy to Development

on:
  workflow_dispatch:
  push:
    branches:
      - dev
  pull_request:
    types: [ closed ]
    branches:
      - dev

concurrency:
  group: "deploy-development"
  cancel-in-progress: true

jobs:
  build-and-push:
    # PR 병합 시 push 이벤트와 중복 실행 방지
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && !contains(github.event.head_commit.message, 'Merge pull request')) ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build-image.outputs.image_tag }}
      registry: ${{ steps.build-image.outputs.registry }}
    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Configure 1Password Service Account
        uses: 1password/load-secrets-action/configure@v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load AWS secrets
        uses: 1password/load-secrets-action@v2
        id: op-load-aws-secret
        with:
          export-env: true
        env:
          AWS_ACCESS_KEY_ID: "op://vault/ecr iam authentication/access key id"
          AWS_SECRET_ACCESS_KEY: "op://vault/ecr iam authentication/secret access key"
          AWS_REGION: "op://vault/ecr iam authentication/region"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build, tag, and push to ECR
        id: build-image
        run: |
          # 이미지 태그 생성
          IMAGE_TAG="${GITHUB_SHA:0:7}"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "registry=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_OUTPUT

          # 이미지 빌드 및 푸시
          docker buildx build --platform linux/amd64,linux/arm64 \
            --provenance false \
            -t ${{ steps.login-ecr.outputs.registry }}/ecr-bottle-note-api:$IMAGE_TAG \
            --push .
          echo "이미지가 성공적으로 푸시되었습니다: ${{ steps.login-ecr.outputs.registry }}/ecr-bottle-note-api:$IMAGE_TAG"

  deploy-to-servers:
    needs: build-and-push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [
          application-bravo,
          application-charlie
        ]
    steps:
      - name: Configure 1Password Service Account
        uses: 1password/load-secrets-action/configure@v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load AWS secrets
        uses: 1password/load-secrets-action@v2
        id: op-load-aws-secret
        with:
          export-env: true
        env:
          AWS_ACCESS_KEY_ID: "op://vault/ecr iam authentication/access key id"
          AWS_SECRET_ACCESS_KEY: "op://vault/ecr iam authentication/secret access key"
          AWS_REGION: "op://vault/ecr iam authentication/region"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Server host secret setup
        id: op-load-server-secret
        uses: 1password/load-secrets-action@v2
        with:
          export-env: true
          unset-previous: false
        env:
          SERVER_IP: op://vault/${{ matrix.environment }}-server/ip
          SERVER_PORT: op://vault/${{ matrix.environment }}-server/port
          SERVER_NAME: op://vault/${{ matrix.environment }}-server/user name
          SERVER_PASSWORD: op://vault/${{ matrix.environment }}-server/password
          SSH_KEY: op://vault/${{ matrix.environment }}-server-ssh/private_key?ssh-format=openssh

      - name: Deploy to Dev Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          port: ${{ env.SERVER_PORT }}
          username: ${{ env.SERVER_NAME }}
          password: ${{ env.SERVER_PASSWORD }}
          key: ${{ env.SSH_KEY }}
          script: |
            # AWS 자격 증명 설정
            aws configure set aws_access_key_id "${{ env.AWS_ACCESS_KEY_ID }}"
            aws configure set aws_secret_access_key "${{ env.AWS_SECRET_ACCESS_KEY }}"
            aws configure set region "${{ env.AWS_REGION }}"

            # ECR 레지스트리 URL 가져오기
            ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            ECR_REGISTRY="${ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"

            # ECR 로그인
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY

            # 이미지 정보 설정
            IMAGE_TAG="${{ needs.build-and-push.outputs.image_tag }}"
            ECR_REPOSITORY="ecr-bottle-note-api"
            FULL_IMAGE_NAME="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

            echo "다운로드할 이미지: $FULL_IMAGE_NAME"

            # 이미지 다운로드
            docker pull $FULL_IMAGE_NAME

            # 다운로드 확인
            docker images | grep $ECR_REPOSITORY

            # 환경 변수 파일 설정
            echo "${{ secrets.DEV_ENV }}" | base64 --decode > .bottlenote.development.ENV

            # 개발 로그 삭제
            sudo rm -f /var/log/bottle-note/application-dev*

            # 기존 컨테이너 중지 및 삭제 (있는 경우)
            docker stop bottle-note-api-api-development || true
            docker rm bottle-note-api-api-development || true
            docker stop bottle-note-api-development || true
            docker rm bottle-note-api-development || true

            docker run -d \
              --name bottle-note-api-development \
              -p 30001:30001 \
              --env-file .bottlenote.development.ENV \
              -e TZ=Asia/Seoul \
              -e SPRING_PROFILES_ACTIVE=dev \
              -e JAVA_OPTS="-Xms256m -Xmx512m -XX:MaxMetaspaceSize=128m" \
              -e SERVER_NAME="${{ matrix.environment }}" \
              -e GIT_BRANCH="${{ github.ref_name }}" \
              -e GIT_COMMIT="${{ github.sha }}" \
              -e BUILD_TIME="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
              -v /var/log/bottle-note:/app/logs \
              --memory=768m \
              --restart unless-stopped \
              $FULL_IMAGE_NAME

            docker ps | grep bottle-note-api-development

            echo "사용하지 않는 모든 Docker 리소스 정리 중..."
            docker system prune -f
            docker image prune -a -f --filter "until=24h"
