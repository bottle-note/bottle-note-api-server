name: Deploy to Dev

on:
  workflow_call:
    inputs:
      IMAGE_TAG:
        required: true
        type: string
    secrets:
      GIT_ACCESS_TOKEN:
        required: true

jobs:
  reusable_workflow_job:
    runs-on: ubuntu-latest
    steps:
      - name: Notification
        run: |
          echo "이것은 개발(dev) 환경 배포 파일입니다."
          echo "배포할 이미지 태그: ${{ inputs.IMAGE_TAG }}"
          echo "깃허브 토큰: ${{ secrets.GIT_ACCESS_TOKEN }}"

      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GIT_ACCESS_TOKEN }}
      - name: Update submodules
        run: |
          git submodule update --init --recursive
          git submodule update --remote

      - name: Setup env file
        run: cp git.environment-variables/deploy/.env .env
      - name: Set ECR credentials
        id: set-credentials
        run: |
          ECR_ACCESS_KEY=$(grep "ECR_ACCESS_KEY:" git.environment-variables/deploy/aws/ecr/properties.yaml | awk '{print $2}')
          ECR_SECRET_ACCESS_KEY=$(grep "ECR_SECRET_ACCESS_KEY:" git.environment-variables/deploy/aws/ecr/properties.yaml | awk '{print $2}')
          ECR_REGION=$(grep "ECR_REGION:" git.environment-variables/deploy/aws/ecr/properties.yaml | awk '{print $2}')
          ECR_REGISTRY=$(grep "ECR_REGISTRY:" git.environment-variables/deploy/aws/ecr/properties.yaml | awk '{print $2}')

          echo "AWS_ACCESS_KEY_ID=$ECR_ACCESS_KEY" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$ECR_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "AWS_REGION=$ECR_REGION" >> $GITHUB_ENV
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
          echo "region=$ECR_REGION" >> $GITHUB_OUTPUT
          echo "registry=$ECR_REGISTRY" >> $GITHUB_OUTPUT

      - name: Deploy ECR Image as Test Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_IP }}
          port: ${{ secrets.DEV_SERVER_PORT }}
          username: ubuntu
          key: ${{ secrets.DEV_SSH_KEY }}
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,ECR_REGISTRY,IMAGE_TAG
          script: |
            # AWS 자격 증명 설정
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            export AWS_REGION=$AWS_REGION

            # ECR 로그인
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

            # 기존 테스트 컨테이너가 있다면 정리
            docker stop test-bottle-note || true
            docker rm test-bottle-note || true

            # ECR에서 이미지 가져와 테스트 컨테이너로 실행
            docker run -d \
              --name test-bottle-note \
              -p 30002:30001 \
              -e TZ=Asia/Seoul \
              -e SPRING_PROFILES_ACTIVE=dev \
              --restart unless-stopped \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              $ECR_REGISTRY/bottle-note-api:$IMAGE_TAG

            echo "테스트 컨테이너 'test-bottle-note'가 포트 30002에서 실행 중입니다."
