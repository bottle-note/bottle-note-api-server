name: Dev Deploy Workflow

on:
  push:
    branches:
      - pr/49
  pull_request:
    types: [ closed ]
    branches:
      - main
      - dev

jobs:
  build-and-push:
    # PR이 merge되었을 때만 실행
    #if: github.event.pull_request.merged == true

    runs-on: ubuntu-latest  # 워크플로우는 최신 Ubuntu 환경에서 실행됩니다.
    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # PR 라벨 확인
      - name: check PR labels
        id: get-labels
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const githubToken = process.env.GITHUB_TOKEN;
            const octokit = github.getOctokit(githubToken);
            const { data: pullRequest } = await octokit.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            return pullRequest.labels.map(label => label.name);

      # CD 라벨이 있는 경우 배포
      - name: Deploy if CD label exists
        if: contains(steps.get-labels.outputs.result, 'Deploy')
        run: |
          echo "Deploying because PR has CD label..."
          # Place your deployment scripts here

      ## JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## 원격 환경에 코드 복사
      - name: copy project # ssh key를 이용해 현재 푸시된 소스를 서버에 복사한다.
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete # rsync 명령어 옵션
          remote_path: /home/ubuntu/app/bottle-note
          remote_host: ${{ secrets.DEV_SERVER_IP }}
          remote_user: ubuntu
          remote_key: ${{ secrets.DEV_SSH_KEY }}

      ## deploy setup
      - name: deploy setup and gradle build
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_IP }}
          username: ubuntu
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd /home/ubuntu/app/bottle-note
            touch  /home/ubuntu/app/bottle-note/src/main/resources/application-dev.yml
            echo "${{ secrets.APPLICATION_DEV }}" | base64 --decode > src/main/resources/application-dev.yml  
            chmod +x gradlew
            ./gradlew build

      ## 개발 도커 실행
      - name: docker compose up
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_IP }}
          username: ubuntu
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd /home/ubuntu/app/bottle-note
            # 기존 실행 중인 컨테이너 중지 및 제거
            docker stop dev-bottle-note || true
            docker rm dev-bottle-note || true
            # Docker Compose를 이용한 컨테이너 빌드 및 실행
            docker-compose -f docker-compose-dev.yml up -d --no-deps --build dev-bottle-note
            # 사용하지 않는 이미지 정리
            docker image prune -f
      
