name: Dev Deploy Workflow

on:
  push:
    branches:
      - dev
  pull_request:
    types: [ closed ]
    branches:
      - dev

# 동시에 여러 워크플로우가 실행되지 않도록 설정
concurrency:
  group: "dev-deploy"
  cancel-in-progress: false

jobs:
  build-and-push:
    # PR이 merge되었을 때만 실행
    # if: github.event.pull_request.merged == true

    runs-on: ubuntu-latest  # 워크플로우는 최신 Ubuntu 환경에서 실행됩니다.
    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true  # 서브모듈 체크아웃 활성화
          token: ${{ secrets.GIT_ACCESS_TOKEN }}  # private 저장소 접근을 위한 토큰


      # 서브모듈 업데이트 (최신 상태로 동기화)
      - name: Update submodules
        run: |
          git submodule update --init --recursive
          git submodule update --remote

      ## JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      ## 원격 환경에 코드 복사
      - name: 프로젝트 복사
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete # rsync 명령어 옵션
          remote_path: /home/ubuntu/app/bottle-note
          remote_host: ${{ secrets.DEV_SERVER_IP }}
          remote_port: ${{ secrets.DEV_SERVER_PORT }}
          remote_user: ubuntu
          remote_key: ${{ secrets.DEV_SSH_KEY }}

      ## deploy setup
      - name: 설정 배포 및 Gradle 빌드
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_IP }}
          port: ${{ secrets.DEV_SERVER_PORT }}
          username: ubuntu
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd /home/ubuntu/app/bottle-note
            touch  /home/ubuntu/app/bottle-note/src/main/resources/application-dev.yml
            echo "${{ secrets.APPLICATION_DEV }}" | base64 --decode > src/main/resources/application-dev.yml  
            chmod +x gradlew
            ./gradlew build -x asciidoctor -x copyRestDocs

      ## 개발 도커 실행
      - name: 도커 구성
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_IP }}
          port: ${{ secrets.DEV_SERVER_PORT }}
          username: ubuntu
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd /home/ubuntu/app/bottle-note
            docker stop dev-bottle-note || true
            docker rm dev-bottle-note || true
            docker-compose -f docker-compose-dev.yml up -d --no-deps --build dev-bottle-note
            docker image prune -f
