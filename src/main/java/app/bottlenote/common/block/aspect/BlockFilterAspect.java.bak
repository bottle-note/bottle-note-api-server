package app.bottlenote.common.block.aspect;

import app.bottlenote.common.block.annotation.BlockFilter;
import app.bottlenote.common.block.service.BlockService;
import app.bottlenote.global.data.response.GlobalResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;

import java.lang.reflect.Field;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * 간소화된 차단 필터 AOP
 * 핵심 기능: 차단된 사용자의 컨텐츠를 블러 처리
 */
@Slf4j
@Aspect
@Component
@RequiredArgsConstructor
public class BlockFilterAspect {

    private final BlockService blockService;
    private final ObjectMapper objectMapper;

    @Around("@annotation(blockFilter)")
    public Object applyBlockFilter(ProceedingJoinPoint joinPoint, BlockFilter blockFilter) throws Throwable {

        // 1. 원본 메서드 실행
        Object result = joinPoint.proceed();

        // 2. 현재 사용자 ID 추출 (테스트용으로 헤더에서 가져옴)
        Long currentUserId = extractCurrentUserId();

        if (currentUserId == -1L) {
            log.debug("인증되지 않은 사용자 - 차단 필터 적용하지 않음");
            return result;
        }

        // 3. 차단된 사용자 목록 조회
        Set<Long> blockedUserIds = blockService.getBlockedUserIds(currentUserId);

        if (blockedUserIds.isEmpty()) {
            log.debug("차단한 사용자가 없음 - 필터링 건너뜀");
            return result;
        }

        log.info("차단 필터 적용: 사용자 {}, 차단 대상 {}", currentUserId, blockedUserIds);

        // 4. 응답 데이터에 블러 처리 적용
        return applyBlurFilter(result, blockedUserIds, blockFilter);
    }

    /**
     * 테스트용: 현재 사용자 ID 추출
     * 실제 운영에서는 SecurityContext에서 가져옴
     */
    private Long extractCurrentUserId() {
        // 현재는 테스트를 위해 고정값 반환
        // 실제로는 SecurityContextUtil.getUserIdByContext() 사용
        return 1L; // 테스트용: 사용자 1로 고정
    }

    /**
     * 응답 데이터에 블러 처리 적용
     */
    private Object applyBlurFilter(Object result, Set<Long> blockedUserIds, BlockFilter blockFilter) {

        if (!(result instanceof ResponseEntity)) {
            return result;
        }

        ResponseEntity<?> responseEntity = (ResponseEntity<?>) result;
        Object body = responseEntity.getBody();

        if (!(body instanceof GlobalResponse)) {
            return result;
        }

        GlobalResponse globalResponse = (GlobalResponse) body;
        Object data = globalResponse.getData();

        if (data == null) {
            return result;
        }

        // 데이터 타입에 따른 블러 처리
        Object blurredData;
        if (data instanceof List) {
            blurredData = blurListData((List<?>) data, blockedUserIds, blockFilter);
        } else {
            blurredData = blurSingleData(data, blockedUserIds, blockFilter);
        }

        // 블러 처리된 데이터로 새로운 응답 생성
        GlobalResponse blurredResponse = GlobalResponse.success(blurredData);
        return ResponseEntity.ok(blurredResponse);
    }

    /**
     * List 형태의 데이터 블러 처리
     */
    @SuppressWarnings("unchecked")
    private List<?> blurListData(List<?> dataList, Set<Long> blockedUserIds, BlockFilter blockFilter) {
        return dataList.stream()
                .map(item -> blurItemIfBlocked(item, blockedUserIds, blockFilter))
                .collect(Collectors.toList());
    }

    /**
     * 단일 객체 데이터 블러 처리
     */
    private Object blurSingleData(Object data, Set<Long> blockedUserIds, BlockFilter blockFilter) {
        return blurItemIfBlocked(data, blockedUserIds, blockFilter);
    }

    /**
     * 개별 항목 차단 여부 확인 후 블러 처리
     */
    private Object blurItemIfBlocked(Object item, Set<Long> blockedUserIds, BlockFilter blockFilter) {
        if (item == null) {
            return item;
        }

        // 사용자 ID 추출
        Long userId = extractUserIdFromObject(item, blockFilter.userField());

        if (userId == null || !blockedUserIds.contains(userId)) {
            return item; // 차단된 사용자가 아니면 원본 반환
        }

        log.debug("차단된 사용자의 컨텐츠 블러 처리: userId={}", userId);

        // 차단된 사용자면 블러 처리
        return applyBlurToItem(item, blockFilter.blurFields());
    }

    /**
     * 객체에서 사용자 ID를 추출
     */
    private Long extractUserIdFromObject(Object obj, String fieldName) {
        try {
            Field field = findFieldInClass(obj.getClass(), fieldName);
            if (field != null) {
                field.setAccessible(true);
                Object value = field.get(obj);
                if (value instanceof Long) {
                    return (Long) value;
                }
            }
        } catch (Exception e) {
            log.warn("사용자 ID 추출 실패: 객체={}, 필드={}", obj.getClass().getSimpleName(), fieldName);
        }
        return null;
    }

    /**
     * 클래스 계층구조에서 필드 찾기
     */
    private Field findFieldInClass(Class<?> clazz, String fieldName) {
        Class<?> currentClass = clazz;
        while (currentClass != null) {
            try {
                return currentClass.getDeclaredField(fieldName);
            } catch (NoSuchFieldException e) {
                currentClass = currentClass.getSuperclass();
            }
        }
        return null;
    }

    /**
     * 개별 항목에 블러 처리 적용
     */
    private Object applyBlurToItem(Object originalItem, String[] blurFields) {
        try {
            // Jackson을 사용한 깊은 복사
            Object clonedItem = deepCloneObject(originalItem);

            // 지정된 필드들을 "차단된 사용자의 글입니다"로 마스킹
            for (String fieldName : blurFields) {
                maskField(clonedItem, fieldName, "차단된 사용자의 글입니다");
            }

            return clonedItem;

        } catch (Exception e) {
            log.error("블러 처리 실패: {}", e.getMessage());
            return originalItem; // 실패 시 원본 반환
        }
    }

    /**
     * 객체의 특정 필드를 마스킹
     */
    private void maskField(Object obj, String fieldName, String maskValue) {
        try {
            Field field = findFieldInClass(obj.getClass(), fieldName);
            if (field != null) {
                field.setAccessible(true);

                // 필드 타입에 따라 적절한 마스킹 값 설정
                if (fieldName.toLowerCase().contains("image") || fieldName.toLowerCase().contains("url")) {
                    field.set(obj, null); // 이미지/URL은 null로 처리
                } else {
                    field.set(obj, maskValue); // 텍스트는 마스킹 메시지로 처리
                }
            }
        } catch (Exception e) {
            // 필드가 없거나 설정 실패 시 무시 (정상적인 상황)
            log.debug("필드 마스킹 건너뜀: {}.{}", obj.getClass().getSimpleName(), fieldName);
        }
    }

    /**
     * Jackson을 사용한 깊은 복사
     */
    private Object deepCloneObject(Object original) {
        try {
            if (original == null) {
                return null;
            }

            String jsonString = objectMapper.writeValueAsString(original);
            return objectMapper.readValue(jsonString, original.getClass());
        } catch (Exception e) {
            log.warn("객체 복사 실패, 원본 반환: {}", e.getMessage());
            return original;
        }
    }
}
