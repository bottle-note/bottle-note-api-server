plugins {
	id 'java-library'
	alias(libs.plugins.spring.boot)
	alias(libs.plugins.spring.dependency.management)
	alias(libs.plugins.asciidoctor)
	alias(libs.plugins.spotless)
	alias(libs.plugins.restdocs.api.spec)
}

ext {
	snippetsDir = file('build/generated-snippets') as File
	generated = 'src/main/generated'
}

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${libs.versions.spring.cloud.get()}"
	}
}

configurations {
	asciidoctorExt
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	implementation project(':bottlenote-shared')
	implementation project(':bottlenote-core')
	testImplementation project(':bottlenote-core')

	// Spring Boot 기본 번들
	implementation libs.bundles.spring.boot.default
	implementation libs.bundles.spring.boot.web

	// Database & ORM
	implementation libs.bundles.spring.boot.jpa
	implementation libs.spring.boot.starter.data.redis
	implementation libs.h2
	runtimeOnly libs.mysql.connector.j
	implementation libs.p6spy

	// QueryDSL
	implementation libs.querydsl.jpa
	annotationProcessor "${libs.querydsl.apt.get()}:jakarta"
	annotationProcessor libs.jakarta.annotation.api
	annotationProcessor libs.jakarta.persistence.api

	// Security
	implementation libs.bundles.spring.boot.security

	// JWT
	implementation libs.bundles.jwt.complete
	implementation libs.google.guava

	// Cache
	implementation libs.spring.boot.starter.cache
	implementation libs.caffeine

	// Monitoring
	implementation libs.spring.boot.starter.actuator
	implementation libs.micrometer.prometheus

	// External Services
	implementation libs.aws.s3
	implementation libs.spring.cloud.starter.openfeign
	implementation libs.firebase.admin

	// Scheduling
	implementation libs.spring.boot.starter.quartz

	// Logging
	implementation libs.logstash.logback

	// Testing
	testImplementation libs.testng
	testImplementation libs.mockito.inline
	testImplementation libs.bundles.testcontainers.complete
	testImplementation libs.archunit

	// Test용 Lombok
	testCompileOnly libs.lombok
	testAnnotationProcessor libs.lombok

	// Documentation
	asciidoctorExt libs.spring.restdocs.asciidoctor
	testImplementation libs.bundles.restdocs.complete
}

// QueryDSL 설정
tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
	main {
		java.srcDirs += [generated]
		resources {
			srcDirs = [
					'src/main/resources',
					'../git.environment-variables'
			]
		}
	}
}

clean {
	delete file(generated)
}

// Spotless 설정
spotless {
	java {
		googleJavaFormat('1.27.0')
		target 'src/main/java/**/*.java', 'src/test/java/**/*.java'
		targetExclude 'src/main/generated/**'
	}
}

// 테스트 태그별 실행
test {
	outputs.upToDateWhen { false }
	useJUnitPlatform {
		excludeTags 'data-jpa-test', 'integration'
	}
	testLogging {
		events "passed", "skipped", "failed"
		showStandardStreams = true
		exceptionFormat = 'full'
		showExceptions = true
		showCauses = true
		showStackTraces = true
	}
}

tasks.register('integration_test', Test) {
	useJUnitPlatform {
		includeTags 'integration'
	}
}

tasks.register('unit_test', Test) {
	useJUnitPlatform {
		includeTags 'unit'
	}
}

tasks.register('check_rule_test', Test) {
	useJUnitPlatform {
		includeTags 'rule'
	}
}

bootJar {
// Spring Boot JAR 설정 (legacy 모듈은 실행 가능한 JAR)
	enabled = true
	archiveFileName = 'bottlenote-legacy-app.jar'
}

jar {
	enabled = true  // 테스트 실행을 위해 jar 태스크 활성화
}

// Spring REST Docs 설정
asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test
	sources {
		include("**/index.adoc")
	}
	baseDirFollowsSourceFile()
}

openapi3 {
	server = 'https://api.bottle-note.com'
	title = 'Bottle Note API (Legacy)'
	version = '1.0.0'
	format = 'yaml'
}
