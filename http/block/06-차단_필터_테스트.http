### 테스트 시나리오 준비 - 차단 관계 생성
# 먼저 사용자 1이 사용자 2,3을 차단하도록 설정
POST {{host}}/api/v1/test/block/add?blockerId=1&blockedId=2&reason=테스트 차단
Content-Type: application/json

###
POST {{host}}/api/v1/test/block/add?blockerId=1&blockedId=3&reason=테스트 차단
Content-Type: application/json

### 1. 차단 필터 테스트 (차단하지 않은 사용자로 요청)
# 사용자 5는 아무도 차단하지 않았으므로 모든 리뷰가 그대로 보임
GET {{host}}/api/v1/test/block/test-data/5
Content-Type: application/json
X-User-Id: 5

### 2. 차단 필터 테스트 (차단한 사용자가 있는 경우)
# 사용자 1이 사용자 2,3을 차단했으므로 해당 리뷰가 마스킹되어야 함
GET {{host}}/api/v1/test/block/test-data/1
Content-Type: application/json
X-User-Id: 1

### 3. 차단 필터 테스트 (다른 사용자로 요청)
# 사용자 4는 아무도 차단하지 않았으므로 모든 리뷰가 그대로 보임  
GET {{host}}/api/v1/test/block/test-data/4
Content-Type: application/json
X-User-Id: 4

### 4. 차단 여부 확인 (사전 확인)
# 사용자 1이 사용자 2를 차단했는지 확인
GET {{host}}/api/v1/test/block/check?blockerId=1&blockedId=2
Content-Type: application/json

### 5. 차단 목록 확인
# 사용자 1의 차단 목록 확인 (2,3이 나와야 함)
GET {{host}}/api/v1/test/block/list/1
Content-Type: application/json

### 6. 차단 해제 후 재테스트
# 사용자 1이 사용자 2의 차단을 해제
DELETE {{host}}/api/v1/test/block/remove?blockerId=1&blockedId=2
Content-Type: application/json

###
# 차단 해제 후 다시 테스트 (사용자 2의 리뷰가 다시 보여야 함)
GET {{host}}/api/v1/test/block/test-data/1
Content-Type: application/json
X-User-Id: 1