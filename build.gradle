plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.9'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'bottlenote'
version = '0.0.1-SNAPSHOT'
ext {
    queryDslVersion = "5.0.0"
    springCloudVersion = "2022.0.5"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

java {
    sourceCompatibility = '17'
}
configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // lombok
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    //querydsl 설정 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // spring rest docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation "com.github.ben-manes.caffeine:caffeine:3.1.8"

    //Mockito-inline
    testImplementation 'org.mockito:mockito-inline:3.4.0'

    //AWS
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.725'

    //Fegin ( https://spring.io/projects/spring-cloud#overview )
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    //apache commons
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    //test containers
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.testcontainers:testcontainers:1.19.8'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.0'
    testImplementation "org.testcontainers:mysql:1.19.0"

}

tasks.named('test') {
    useJUnitPlatform() {
        excludeTags 'data-jpa-test', 'integration'
    }
}

tasks.register('integrationTest', Test) {
    useJUnitPlatform {
        includeTags 'integration'
    }
}
tasks.register('dataJpaTest', Test) {
    useJUnitPlatform {
        includeTags 'data-jpa-test'
    }
}
tasks.register('unitTest', Test) {
    useJUnitPlatform {
        includeTags 'unit'
    }
}

tasks.register('allTests', Test) {
    useJUnitPlatform {
        includeTags 'integration', 'unit'
    }
}


// =========================== spring boot jar setting ===========================

bootJar {
    archiveFileName = 'app.jar' // jar 파일명 변경 ( 기본값 : ${project.name}-${project.version}.jar )
}
jar {
    enabled = false // plain jar 파일 생성 안함
}

// =========================== spring rest docs setting ===========================

ext {
    snippetsDir = file('build/generated-snippets') as File
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
    sources {
        include("**/index.adoc")
    }
    baseDirFollowsSourceFile()
}

tasks.register('copyRestDocs', Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc/index.html")
    into 'docs'
}

build {
    dependsOn copyRestDocs
}

// =========================== query DSL  ===========================

// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [generated]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}
