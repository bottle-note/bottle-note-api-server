// 멀티모듈 루트 프로젝트 설정
plugins {
	alias(libs.plugins.spring.boot) apply false
	alias(libs.plugins.spring.dependency.management) apply false
	alias(libs.plugins.asciidoctor) apply false
	alias(libs.plugins.spotless) apply false
	alias(libs.plugins.restdocs.api.spec) apply false
}

// 전역 변수 설정
ext {
	generated = 'src/main/generated'
}

// 전체 프로젝트 공통 설정
allprojects {
	group = 'bottlenote'
	version = '0.0.1-SNAPSHOT'

	repositories {
		mavenCentral()
	}
}

// 서브모듈 공통 설정
subprojects {
	apply plugin: 'java-library'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'java-test-fixtures'
	apply plugin: 'maven-publish'

	java {
		sourceCompatibility = JavaVersion.VERSION_21
		targetCompatibility = JavaVersion.VERSION_21
	}
	plugins.withId('com.diffplug.spotless') {
		tasks.named('compileJava').configure {
			dependsOn 'spotlessApply'
		}
	}

	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${libs.versions.spring.cloud.get()}"
		}
	}

	dependencies {
		// 서브모듈 기본 의존성
		implementation libs.spring.boot.starter
		testImplementation libs.spring.boot.starter.test
		annotationProcessor libs.spring.boot.configuration.processor

		// 공통 유틸리티
		implementation libs.lombok
		annotationProcessor libs.lombok
		implementation libs.commons.lang3
	}

	// QueryDSL 설정 (mono, product-api에서 사용)
	if (project.name in ['bottlenote-mono', 'bottlenote-product-api']) {
		tasks.withType(JavaCompile).configureEach {
			options.getGeneratedSourceOutputDirectory().set(file(generated))
		}
		clean {
			delete file(generated)
		}
	}

	sourceSets {
		main {
			resources {
				srcDirs = ['src/main/resources',
						   '../git.environment-variables']
			}
		}
		test {
			resources {
				srcDirs = ['src/test/resources',
						   '../git.environment-variables']
			}
		}
	}

	// Spotless 설정 (mono, product-api에서 사용)
	if (project.name in ['bottlenote-mono', 'bottlenote-product-api']) {
		apply plugin: 'com.diffplug.spotless'

		spotless {
			java {
				googleJavaFormat('1.27.0')
				target 'src/main/java/**/*.java', 'src/test/java/**/*.java'
				targetExclude 'src/main/generated/**'
			}
		}
	}

	// 서브모듈은 기본적으로 라이브러리 JAR 생성
	bootJar.enabled = false
	jar.enabled = true

	// 테스트 설정
	test {
		outputs.upToDateWhen { false }
		useJUnitPlatform {
			excludeTags 'data-jpa-test', 'integration'
		}
		testLogging {
			events "passed", "skipped", "failed"
			showStandardStreams = true
			exceptionFormat = 'full'
			showExceptions = true
			showCauses = true
			showStackTraces = true
		}
	}

	// 공통 테스트 태스크 정의
	tasks.register('integration_test', Test) {
		useJUnitPlatform {
			includeTags 'integration'
		}
	}

	tasks.register('unit_test', Test) {
		useJUnitPlatform {
			includeTags 'unit'
		}
	}

	tasks.register('check_rule_test', Test) {
		useJUnitPlatform {
			includeTags 'rule'
		}
	}
}

// 루트 프로젝트 태스크
tasks.register('spotlessApply') {
	description = '전체 모듈 Spotless 적용'
	group = 'formatting'
	dependsOn subprojects.findAll { it.tasks.findByName('spotlessApply') }.collect { it.tasks.spotlessApply }
}

tasks.register('spotlessCheck') {
	description = '전체 모듈 Spotless 검증'
	group = 'formatting'
	dependsOn subprojects.findAll { it.tasks.findByName('spotlessCheck') }.collect { it.tasks.spotlessCheck }
}

tasks.register('integration_test') {
	description = '전체 모듈 통합 테스트 실행'
	group = 'verification'
	dependsOn subprojects.findAll { it.tasks.findByName('integration_test') }.collect { it.tasks.integration_test }
}

tasks.register('unit_test') {
	description = '전체 모듈 단위 테스트 실행'
	group = 'verification'
	dependsOn subprojects.findAll { it.tasks.findByName('unit_test') }.collect { it.tasks.unit_test }
}

tasks.register('check_rule_test') {
	description = '전체 모듈 아키텍처 규칙 테스트 실행'
	group = 'verification'
	dependsOn subprojects.findAll { it.tasks.findByName('check_rule_test') }.collect { it.tasks.check_rule_test }
}
